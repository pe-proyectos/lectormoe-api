generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Token {
  id     Int @id @default(autoincrement())
  userId Int

  token String @db.Text

  createdAt DateTime @default(now()) @db.Timestamp
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id])

  @@map("token")
}

model User {
  id Int @id @default(autoincrement())

  username String @unique @db.VarChar(256)
  slug     String @unique @db.VarChar(256)
  email    String @unique @db.VarChar(256)
  password String @db.VarChar(256)

  createdAt DateTime @default(now()) @db.Timestamp
  updatedAt DateTime @updatedAt

  rankings      Ranking[]
  tokens        Token[]
  members       Member[]
  analytics     Analytics[]
  history       UserChapterHistory[]
  invitations   Invitation[]
  subscriptions Subscription[]

  @@map("user")
}

model Organization {
  id Int @id @default(autoincrement())

  name        String  @unique @db.VarChar(256)
  title       String  @unique @db.VarChar(256)
  domain      String  @unique @db.VarChar(256)
  slug        String  @unique @db.VarChar(256)
  description String? @db.Text
  logoUrl     String? @db.Text
  imageUrl    String? @db.Text
  bannerUrl   String? @db.Text
  faviconUrl  String? @db.Text

  enableGoogleAds        Boolean @default(false)
  googleAdsMetaContent   String? @db.Text
  googleAdsAdsTxtContent String? @db.Text

  enableDisqusIntegration Boolean @default(false)
  disqusEmbedUrl          String? @db.Text

  facebookUrl  String? @db.Text
  twitterUrl   String? @db.Text
  instagramUrl String? @db.Text
  youtubeUrl   String? @db.Text
  patreonUrl   String? @db.Text
  tiktokUrl    String? @db.Text
  discordUrl   String? @db.Text
  twitchUrl    String? @db.Text

  createdAt DateTime @default(now()) @db.Timestamp
  updatedAt DateTime @updatedAt

  members       Member[]
  mangaCustoms  MangaCustom[]
  genres        Genre[]
  analytics     Analytics[]
  invitations   Invitation[]
  subscriptions Subscription[]

  @@map("organization")
}

model Member {
  id             Int @id @default(autoincrement())
  organizationId Int
  userId         Int

  role        String  @db.VarChar(256)
  description String? @db.Text

  hierarchyLevel Int @default(0)

  // ## Permissions
  // Organization
  canSeeAdminPanel      Boolean @default(false)
  canEditOrganization   Boolean @default(false)
  canDeleteOrganization Boolean @default(false)
  // Organization Members
  canInviteMember       Boolean @default(false)
  canEditMember         Boolean @default(false)
  canDeleteMember       Boolean @default(false)
  // Author
  canCreateAuthor       Boolean @default(false)
  // Manga Profile
  canCreateMangaProfile Boolean @default(false)
  // Manga Custom
  canCreateMangaCustom  Boolean @default(false)
  canEditMangaCustom    Boolean @default(false)
  canDeleteMangaCustom  Boolean @default(false)
  // Genre
  canCreateGenre        Boolean @default(false)
  canEditGenre          Boolean @default(false)
  canDeleteGenre        Boolean @default(false)
  // Chapter
  canCreateChapter      Boolean @default(false)
  canEditChapter        Boolean @default(false)
  canDeleteChapter      Boolean @default(false)
  // Pages
  canCreatePage         Boolean @default(false)
  canEditPage           Boolean @default(false)
  canDeletePage         Boolean @default(false)
  // ## / Permissions

  createdAt DateTime @default(now()) @db.Timestamp
  updatedAt DateTime @updatedAt

  organization Organization @relation(fields: [organizationId], references: [id])
  user         User         @relation(fields: [userId], references: [id])

  news   News[]
  audits Audit[]

  @@unique([organizationId, userId])
  @@map("member")
}

model SubscriptionModel {
  id Int @id @default(autoincrement())

  title                 String  @db.VarChar(256)
  description           String? @db.Text
  benefits              String? @db.Text
  readAnticipationHours Int
  monthlyPrice          Float
  yearlyPrice           Float
  discountMonthlyPrice  Float
  discountYearlyPrice   Float
  active                Boolean @default(false)

  createdAt DateTime @default(now()) @db.Timestamp
  updatedAt DateTime @updatedAt

  subscriptions Subscription[]

  @@map("subscription_model")
}

model Subscription {
  id                  Int @id @default(autoincrement())
  organizationId      Int
  userId              Int
  subscriptionModelId Int

  expiresAt               DateTime  @db.Timestamp
  active                  Boolean   @default(false)
  autoRenew               Boolean   @default(false)
  autoRenewAt             DateTime? @db.Timestamp
  autoRenewCanceledReason String?   @db.Text
  note                    String?
  paymentMethod           String?   @db.VarChar(256)
  payingMonthly           Boolean   @default(false)
  payingYearly            Boolean   @default(false)
  payingMonthlyAmount     Float
  payingYearlyAmount      Float

  createdAt DateTime @default(now()) @db.Timestamp
  updatedAt DateTime @updatedAt

  organization      Organization      @relation(fields: [organizationId], references: [id])
  user              User              @relation(fields: [userId], references: [id])
  subscriptionModel SubscriptionModel @relation(fields: [subscriptionModelId], references: [id])

  @@unique([organizationId, userId])
  @@map("subscription")
}

model Invitation {
  id             Int @id @default(autoincrement())
  organizationId Int
  userId         Int

  message   String?  @db.Text
  expiresAt DateTime @db.Timestamp
  status    String

  createdAt DateTime @default(now()) @db.Timestamp
  updatedAt DateTime @updatedAt

  organization Organization @relation(fields: [organizationId], references: [id])
  user         User         @relation(fields: [userId], references: [id])

  @@map("invitation")
}

model Author {
  id Int @id @default(autoincrement())

  name             String  @unique @db.VarChar(256)
  slug             String  @unique @db.VarChar(256)
  shortDescription String? @db.VarChar(300)
  description      String? @db.Text
  imageUrl         String? @db.Text

  createdAt DateTime @default(now()) @db.Timestamp
  updatedAt DateTime @updatedAt

  mangas Manga[]

  @@map("author")
}

model Manga {
  id           Int @id @default(autoincrement())
  demographyId Int

  title            String    @unique @db.VarChar(256)
  slug             String    @unique @db.VarChar(256)
  shortDescription String?   @db.VarChar(300)
  description      String?   @db.Text
  imageUrl         String?   @db.Text
  bannerUrl        String?   @db.Text
  releasedAt       DateTime?
  nextChapterAt    DateTime?

  createdAt DateTime @default(now()) @db.Timestamp
  updatedAt DateTime @updatedAt

  authors Author[]
  custom  MangaCustom[]

  demography Demography @relation(fields: [demographyId], references: [id])

  @@map("manga")
}

model MangaCustom {
  id             Int @id @default(autoincrement())
  mangaId        Int
  organizationId Int

  title            String    @db.VarChar(256)
  shortDescription String?   @db.VarChar(300)
  description      String?   @db.Text
  imageUrl         String?   @db.Text
  bannerUrl        String?   @db.Text
  releasedAt       DateTime?
  nextChapterAt    DateTime?
  lastChapterAt    DateTime?
  views            Int       @default(0)
  status           String    @default("ongoing") @db.VarChar(256)
  visibility       String    @default("public") @db.VarChar(256)
  isSubscription   Boolean   @default(false)

  createdAt DateTime @default(now()) @db.Timestamp
  updatedAt DateTime @updatedAt

  chapters     Chapter[]
  rankings     Ranking[]
  genres       Genre[]
  viewsHistory ViewsHistory[]
  manga        Manga          @relation(fields: [mangaId], references: [id])
  organization Organization   @relation(fields: [organizationId], references: [id])

  @@unique([mangaId, organizationId])
  @@map("manga_custom")
}

model Chapter {
  id            Int @id @default(autoincrement())
  mangaCustomId Int

  number         Float
  title          String   @db.VarChar(256)
  imageUrl       String?  @db.VarChar(256)
  views          Int      @default(0)
  isSubscription Boolean  @default(false)
  releasedAt     DateTime @default(now()) @db.Timestamp

  createdAt DateTime @default(now()) @db.Timestamp
  updatedAt DateTime @updatedAt

  mangaCustom  MangaCustom          @relation(fields: [mangaCustomId], references: [id])
  pages        Page[]
  userHistory  UserChapterHistory[]
  viewsHistory ViewsHistory[]

  @@unique([number, mangaCustomId])
  @@map("chapter")
}

model Page {
  id        Int @id @default(autoincrement())
  chapterId Int

  number      Int
  imageWidth  Int
  imageHeight Int
  imageType   String   @db.VarChar(256)
  imageUrl    String   @db.Text
  createdAt   DateTime @default(now()) @db.Timestamp
  updatedAt   DateTime @updatedAt

  chapter Chapter @relation(fields: [chapterId], references: [id])

  @@unique([number, chapterId])
  @@map("page")
}

model Ranking {
  id            Int  @id @default(autoincrement())
  mangaCustomId Int
  userId        Int?

  rank      String   @db.Char(1)
  comment   String?  @db.Text
  createdAt DateTime @default(now()) @db.Timestamp
  updatedAt DateTime @updatedAt

  mangaCustom MangaCustom @relation(fields: [mangaCustomId], references: [id])
  user        User?       @relation(fields: [userId], references: [id])

  @@map("ranking")
}

model Demography {
  id Int @id @default(autoincrement())

  name        String @unique @db.VarChar(256)
  slug        String @unique @db.VarChar(256)
  description String @db.Text

  createdAt DateTime @default(now()) @db.Timestamp
  updatedAt DateTime @updatedAt

  mangas Manga[]

  @@map("demography")
}

model Genre {
  id Int @id @default(autoincrement())

  organizationId Int

  name        String  @db.VarChar(256)
  nameEs      String  @db.VarChar(256)
  slug        String  @db.VarChar(256)
  description String  @db.Text
  display     Boolean @default(true)

  createdAt DateTime @default(now()) @db.Timestamp
  updatedAt DateTime @updatedAt

  mangasCustom MangaCustom[]
  organization Organization  @relation(fields: [organizationId], references: [id])

  @@unique([organizationId, slug])
  @@map("genre")
}

model Analytics {
  id Int @id @default(autoincrement())

  organizationId Int?
  userId         Int?

  ip           String?
  event        String?
  path         String?
  userAgent    String?
  screenWidth  Int?
  screenHeight Int?
  browser      String?
  deviceType   String?
  capturedAt   DateTime @default(now()) @db.Timestamp
  payload      Json?

  createdAt DateTime @default(now()) @db.Timestamp
  updatedAt DateTime @updatedAt

  organization Organization? @relation(fields: [organizationId], references: [id])
  user         User?         @relation(fields: [userId], references: [id])

  @@map("analytics")
}

model UserChapterHistory {
  id Int @id @default(autoincrement())

  userId    Int
  chapterId Int

  pageNumber Int?
  startedAt  DateTime?
  lastReadAt DateTime?
  finishedAt DateTime?

  createdAt DateTime @default(now()) @db.Timestamp
  updatedAt DateTime @updatedAt

  chapter Chapter @relation(fields: [chapterId], references: [id])
  user    User    @relation(fields: [userId], references: [id])

  @@unique([chapterId, userId])
  @@map("user_chapter_history")
}

model News {
  id Int @id @default(autoincrement())

  memberId Int

  title       String  @db.VarChar(256)
  slug        String  @db.VarChar(256)
  description String? @db.Text
  imageUrl    String? @db.Text
  content     String? @db.Text
  views       Int     @default(0)

  createdAt DateTime @default(now()) @db.Timestamp
  updatedAt DateTime @updatedAt

  member Member @relation(fields: [memberId], references: [id])

  @@unique([memberId, slug])
  @@map("news")
}

model Audit {
  id Int @id @default(autoincrement())

  memberId Int

  action   String  @db.VarChar(256)
  payload  Json?
  ip       String
  browser  String?
  language String?
  device   String?

  createdAt DateTime @default(now()) @db.Timestamp
  updatedAt DateTime @updatedAt

  member Member @relation(fields: [memberId], references: [id])

  @@map("audit")
}

model ViewsHistory {
  id Int @id @default(autoincrement())

  mangaCustomId Int?
  chapterId     Int?

  ip       String
  viewedAt DateTime

  createdAt DateTime @default(now()) @db.Timestamp
  updatedAt DateTime @updatedAt

  mangaCustom MangaCustom? @relation(fields: [mangaCustomId], references: [id])
  chapter     Chapter?     @relation(fields: [chapterId], references: [id])

  @@map("views")
}
