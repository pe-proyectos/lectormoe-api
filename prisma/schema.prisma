generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Token {
  id      Int @id @default(autoincrement())
  user_id Int

  token String @db.Text

  created_at DateTime @default(now()) @db.Timestamp
  updated_at DateTime @updatedAt

  user User @relation(fields: [user_id], references: [id])

  @@map("token")
}

model User {
  id Int @id @default(autoincrement())

  username String @unique @db.VarChar(256)
  slug     String @unique @db.VarChar(256)
  email    String @unique @db.VarChar(256)
  password String @db.VarChar(256)

  created_at DateTime @default(now()) @db.Timestamp
  updated_at DateTime @updatedAt

  rankings Ranking[]
  tokens   Token[]
  mangas   Manga[]

  @@map("user")
}

model Author {
  id Int @id @default(autoincrement())

  name              String @unique @db.VarChar(256)
  slug              String @unique @db.VarChar(256)
  short_description String @db.VarChar(256)
  description       String @db.Text
  image_url         String @db.Text

  created_at DateTime @default(now()) @db.Timestamp
  updated_at DateTime @updatedAt

  favorite_mangas Manga[]

  @@map("author")
}

model Manga {
  id            Int @id @default(autoincrement())
  author_id     Int
  demography_id Int

  title             String    @unique @db.VarChar(256)
  slug              String    @unique @db.VarChar(256)
  short_description String    @db.VarChar(256)
  description       String    @db.Text
  image_url         String    @db.Text
  released_at       DateTime?
  next_chapter_at   DateTime?

  created_at DateTime @default(now()) @db.Timestamp
  updated_at DateTime @updatedAt

  chapters   Chapter[]
  rankings   Ranking[]
  genres     Genre[]
  users      User[]
  demography Demography @relation(fields: [demography_id], references: [id])
  author     Author     @relation(fields: [author_id], references: [id])

  @@map("manga")
}

model Chapter {
  id       Int @id @default(autoincrement())
  manga_id Int

  slug       String   @db.VarChar(256)
  number     Int
  title      String   @db.VarChar(256)
  image_url  String   @db.VarChar(256)
  created_at DateTime @default(now()) @db.Timestamp
  updated_at DateTime @updatedAt

  manga Manga  @relation(fields: [manga_id], references: [id])
  pages Page[]

  @@unique([slug, manga_id])
  @@map("chapter")
}

model Page {
  id         Int @id @default(autoincrement())
  chapter_id Int

  number     Int
  image_url  String   @db.Text
  created_at DateTime @default(now()) @db.Timestamp
  updated_at DateTime @updatedAt

  chapter Chapter @relation(fields: [chapter_id], references: [id])

  @@map("page")
}

model Ranking {
  id       Int  @id @default(autoincrement())
  manga_id Int
  user_id  Int?

  rank       String   @db.Char(1)
  comment    String?  @db.Text
  created_at DateTime @default(now()) @db.Timestamp
  updated_at DateTime @updatedAt

  manga Manga @relation(fields: [manga_id], references: [id])
  user  User? @relation(fields: [user_id], references: [id])

  @@map("ranking")
}

model Demography {
  id Int @id @default(autoincrement())

  name        String @unique @db.VarChar(256)
  slug        String @unique @db.VarChar(256)
  description String @db.Text

  created_at DateTime @default(now()) @db.Timestamp
  updated_at DateTime @updatedAt

  mangas Manga[]

  @@map("demography")
}

model Genre {
  id Int @id @default(autoincrement())

  name        String  @unique @db.VarChar(256)
  name_es     String  @db.VarChar(256)
  slug        String  @unique @db.VarChar(256)
  description String  @db.Text
  display     Boolean @default(true)

  created_at DateTime @default(now()) @db.Timestamp
  updated_at DateTime @updatedAt

  mangas Manga[]

  @@map("genre")
}
