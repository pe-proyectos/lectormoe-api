generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Token {
  id     Int @id @default(autoincrement())
  userId Int

  token String @db.Text

  createdAt DateTime @default(now()) @db.Timestamp
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id])

  @@map("token")
}

model User {
  id Int @id @default(autoincrement())

  username String @unique @db.VarChar(256)
  slug     String @unique @db.VarChar(256)
  email    String @unique @db.VarChar(256)
  password String @db.VarChar(256)

  createdAt DateTime @default(now()) @db.Timestamp
  updatedAt DateTime @updatedAt

  rankings Ranking[]
  tokens   Token[]
  members  Member[]

  @@map("user")
}

model Organization {
  id Int @id @default(autoincrement())

  name        String @unique @db.VarChar(256)
  title       String @unique @db.VarChar(256)
  domain      String @unique @db.VarChar(256)
  slug        String @unique @db.VarChar(256)
  description String @db.Text
  imageUrl    String @db.Text

  createdAt DateTime @default(now()) @db.Timestamp
  updatedAt DateTime @updatedAt

  members Member[]
  custom  MangaCustom[]

  @@map("organization")
}

model Member {
  id             Int @id @default(autoincrement())
  organizationId Int
  userId         Int

  role        String @db.VarChar(256)
  description String @db.Text

  canEditOrganization   Boolean @default(false)
  canDeleteOrganization Boolean @default(false)
  canInviteMember       Boolean @default(false)
  canEditMember         Boolean @default(false)
  canDeleteMember       Boolean @default(false)
  canUploadManga        Boolean @default(false)
  canEditManga          Boolean @default(false)
  canDeleteManga        Boolean @default(false)
  canUploadChapter      Boolean @default(false)
  canEditChapter        Boolean @default(false)
  canDeleteChapter      Boolean @default(false)
  canUploadPage         Boolean @default(false)
  canEditPage           Boolean @default(false)
  canDeletePage         Boolean @default(false)

  createdAt DateTime @default(now()) @db.Timestamp
  updatedAt DateTime @updatedAt

  organization Organization @relation(fields: [organizationId], references: [id])
  user         User         @relation(fields: [userId], references: [id])

  @@unique([organizationId, userId])
  @@map("member")
}

model Author {
  id Int @id @default(autoincrement())

  name             String @unique @db.VarChar(256)
  slug             String @unique @db.VarChar(256)
  shortDescription String @db.VarChar(256)
  description      String @db.Text
  imageUrl         String @db.Text

  createdAt DateTime @default(now()) @db.Timestamp
  updatedAt DateTime @updatedAt

  mangas Manga[]

  @@map("author")
}

model Manga {
  id           Int @id @default(autoincrement())
  demographyId Int

  title            String    @unique @db.VarChar(256)
  slug             String    @unique @db.VarChar(256)
  shortDescription String    @db.VarChar(256)
  description      String    @db.Text
  imageUrl         String?   @db.Text
  releasedAt       DateTime?
  nextChapterAt    DateTime?

  createdAt DateTime @default(now()) @db.Timestamp
  updatedAt DateTime @updatedAt

  authors Author[]
  custom  MangaCustom[]

  demography Demography @relation(fields: [demographyId], references: [id])

  @@map("manga")
}

model MangaCustom {
  id             Int @id @default(autoincrement())
  mangaId        Int
  organizationId Int

  title            String    @db.VarChar(256)
  shortDescription String    @db.VarChar(256)
  description      String    @db.Text
  imageUrl         String    @db.Text
  releasedAt       DateTime?
  nextChapterAt    DateTime?

  createdAt DateTime @default(now()) @db.Timestamp
  updatedAt DateTime @updatedAt

  chapters     Chapter[]
  rankings     Ranking[]
  genres       Genre[]
  manga        Manga        @relation(fields: [mangaId], references: [id])
  organization Organization @relation(fields: [organizationId], references: [id])

  @@unique([mangaId, organizationId])
  @@map("manga_custom")
}

model Chapter {
  id            Int @id @default(autoincrement())
  mangaCustomId Int

  number    Int
  title     String   @db.VarChar(256)
  imageUrl  String?  @db.VarChar(256)
  createdAt DateTime @default(now()) @db.Timestamp
  updatedAt DateTime @updatedAt

  mangaCustom MangaCustom @relation(fields: [mangaCustomId], references: [id])
  pages       Page[]

  @@unique([number, mangaCustomId])
  @@map("chapter")
}

model Page {
  id        Int @id @default(autoincrement())
  chapterId Int

  number    Int
  imageUrl  String   @db.Text
  createdAt DateTime @default(now()) @db.Timestamp
  updatedAt DateTime @updatedAt

  chapter Chapter @relation(fields: [chapterId], references: [id])

  @@unique([number, chapterId])
  @@map("page")
}

model Ranking {
  id            Int  @id @default(autoincrement())
  mangaCustomId Int
  userId        Int?

  rank      String   @db.Char(1)
  comment   String?  @db.Text
  createdAt DateTime @default(now()) @db.Timestamp
  updatedAt DateTime @updatedAt

  mangaCustom MangaCustom @relation(fields: [mangaCustomId], references: [id])
  user        User?       @relation(fields: [userId], references: [id])

  @@map("ranking")
}

model Demography {
  id Int @id @default(autoincrement())

  name        String @unique @db.VarChar(256)
  slug        String @unique @db.VarChar(256)
  description String @db.Text

  createdAt DateTime @default(now()) @db.Timestamp
  updatedAt DateTime @updatedAt

  mangas Manga[]

  @@map("demography")
}

model Genre {
  id Int @id @default(autoincrement())

  name        String  @unique @db.VarChar(256)
  nameEs      String  @db.VarChar(256)
  slug        String  @unique @db.VarChar(256)
  description String  @db.Text
  display     Boolean @default(true)

  createdAt DateTime @default(now()) @db.Timestamp
  updatedAt DateTime @updatedAt

  mangasCustom MangaCustom[]

  @@map("genre")
}
